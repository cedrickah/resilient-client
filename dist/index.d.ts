import { AxiosInstance } from 'axios';
import { AxiosRequestConfig } from 'axios';
import { AxiosResponse } from 'axios';
import CircuitBreaker from 'opossum';
import { Method } from 'axios';

declare type BreakerIndexObject = {
    requestMethod: Method;
    requestURL: string;
};

/**
 * Constructs a ResilientClient.
 *
 * @class Client
 * @param {CircuitBreaker.Options} circuitBreakerOptions Options for the circuit breaker
 * @param {AxiosRequestConfig} requestOptions Options for the {@link Fetcher}
 */
declare class Client {
    _cbOptions: CircuitBreaker.Options<unknown[]>;
    _fetcher: Fetcher;
    _circuits: Map<any, any>;
    constructor(circuitBreakerOptions: CircuitBreaker.Options, requestOptions: AxiosRequestConfig);
    /**
     * Perform a HTTP request that might fails
     *
     * @param {AxiosRequestConfig} fetchConfig Options for the {@link Fetcher}
     * @return {Promise<AxiosResponse>} Promise resolves with the HTTP response
     * on success or is rejected on failure of the action. Use isBreakerError()
     * to determine if a rejection was a result of the circuit breaker or the
     * HTTP call.
     */
    request(fetchConfig: AxiosRequestConfig): Promise<AxiosResponse>;
    /**
     * Returns true if the provided error was generated by an circuit breaker. It will be false
     * if the error came from the action itself.
     *
     * @param {Error} error The Error to check
     * @returns {Boolean} true if the error was generated by an circuit breaker
     */
    static isBreakerError(error: Error): boolean;
    /**
     * Get an specific circuit breaker.
     * Helpful when you need to get stats from a circuit breaker.
     *
     * @param {BreakerIndexObject} indexObject IndexObject contains the URL and method of the request
     * associated with a circuit breaker. Request and URL together are used as index for the circuit breaker.
     * They can be formatted into an string index using {@link BreakerIndexObject}
     * @returns {CircuitBreaker} Circuit breaker
     */
    getCircuitBreaker(indexObject: BreakerIndexObject): CircuitBreaker;
}

/**
 * Wrapper for an Axios client.
 *
 * @private
 * @class Fetcher
 * @param {AxiosRequestConfig} options Axios options for the wrapper {@link Fetcher}
 */
declare class Fetcher {
    _options: AxiosRequestConfig<any>;
    _axiosInstance: AxiosInstance | undefined;
    constructor(options: AxiosRequestConfig);
    /**
     * Init a axios instance.
     *
     * @param {string} apiURL The base URL of the Axios client
     * @returns {void}
     */
    private _init;
    /**
     * Perform a HTTP request.
     *
     * @param {AbortSignal} abortSignal Abort signal to cancel the request
     * @param {AxiosRequestConfig} fetchConfig Options for the Axios request
     * @return {Promise<AxiosResponse>} Promise resolves with the response
     */
    exec: (abortSignal: AbortSignal, fetchConfig: AxiosRequestConfig) => Promise<AxiosResponse>;
}

declare const ResilientClient: typeof Client;
export default ResilientClient;

export { }
